//general-purpose Lambda function without DynamoDB that you can use for any Express-based project:


//const serverless = require('serverless-http');
//const app = require('./src/app'); // Ensure this points to your Express app

//module.exports.handler = serverless(app);

//(Lambda + Express + DynamoDB)
// Import necessary modules
const AWS = require("aws-sdk");
const serverless = require("serverless-http");
const express = require("express");

// Initialize Express app
const app = express();
app.use(express.json());

// Initialize DynamoDB DocumentClient
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const tableName = "InventoryItems"; // ✅ Define the table name here

// Health check route
app.get("/", (req, res) => {
    res.send("✅ Inventory Management System API is running!");
});

// Route: Add a product (POST /api/products)
app.post("/api/products", async (req, res) => {
    const { id, name, price } = req.body;

    if (!id || !name || !price) {
        return res.status(400).json({ error: "Missing required fields" });
    }

    const params = {
        TableName: tableName, 
        Item: {
            id,
            name,
            price,
            createdAt: new Date().toISOString(),
        },
    };

    try {
        await dynamoDB.put(params).promise();
        return res.status(201).json({ message: "Product added", item: params.Item });
    } catch (error) {
        console.error("Error writing to DynamoDB:", error);
        return res.status(500).json({ error: "Could not write to DynamoDB" });
    }
});

// Route: Get a single product by ID (GET /api/products/:id)
app.get("/api/products/:id", async (req, res) => {
    let { id } = req.params;
    id = id.toString(); 

    const params = {
        TableName: tableName, 
        Key: { id },
    };

    try {
        const { Item } = await dynamoDB.get(params).promise();
        if (!Item) {
            return res.status(404).json({ error: "Product not found" });
        }
        return res.status(200).json(Item);
    } catch (error) {
        console.error("Error fetching product:", error);
        return res.status(500).json({ error: "Could not fetch product" });
    }
});

// ✅ NEW: Update a product (PUT /api/products/:id)
app.put("/api/products/:id", async (req, res) => {
    let { id } = req.params;
    id = id.toString(); 
    const { name, price } = req.body;

    if (!name && !price) {
        return res.status(400).json({ error: "At least one field (name or price) is required for update" });
    }

    let updateExpression = "set";
    let expressionAttributeValues = {};
    let expressionAttributeNames = {};

    if (name) {
        updateExpression += " #name = :name,";
        expressionAttributeValues[":name"] = name;
        expressionAttributeNames["#name"] = "name";
    }
    if (price) {
        updateExpression += " #price = :price,";
        expressionAttributeValues[":price"] = price;
        expressionAttributeNames["#price"] = "price";
    }

    updateExpression = updateExpression.slice(0, -1); 

    const params = {
        TableName: tableName,
        Key: { id },
        UpdateExpression: updateExpression,
        ExpressionAttributeValues: expressionAttributeValues,
        ExpressionAttributeNames: expressionAttributeNames,
        ReturnValues: "ALL_NEW",
    };

    try {
        const { Attributes } = await dynamoDB.update(params).promise();
        if (!Attributes) {
            return res.status(404).json({ error: "Product not found" });
        }
        return res.status(200).json({ message: "Product updated", updatedProduct: Attributes });
    } catch (error) {
        console.error("Error updating product:", error);
        return res.status(500).json({ error: "Could not update product" });
    }
});

// ✅ Import all route modules dynamically
const productRoutes = require("./src/routes/productRoutes");
const salesRoutes = require("./src/routes/salesRoutes");
const authRoutes = require("./src/routes/authRoutes");
const categoryRoutes = require("./src/routes/categoryRoutes");

// ✅ Link the routes
app.use("/api/products", productRoutes);
app.use("/api/sales", salesRoutes);
app.use("/api/auth", authRoutes);
app.use("/api/categories", categoryRoutes);

// Export the Express app wrapped with Serverless for AWS Lambda
module.exports.handler = serverless(app);
